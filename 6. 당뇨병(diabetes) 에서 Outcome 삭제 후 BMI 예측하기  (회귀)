import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor       # 👈 회귀 모델로 변경
from sklearn.ensemble import RandomForestRegressor   # 👈 회귀 모델로 변경
from sklearn.linear_model import LinearRegression      # 👈 회귀 모델로 변경
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score # 👈 회귀용 평가 도구

# -----------------------------
# 1) 데이터 준비
# -----------------------------
# diabetes.csv 파일을 불러옵니다.
df = pd.read_csv("/content/drive/MyDrive/diabetes.csv")

# ⭐️ 1. 문제지와 정답지를 새로 정의합니다.
# 문제지(X): 정답인 'BMI'와 불필요한 'Outcome' 컬럼을 모두 제외한 데이터
X = df.drop(columns=["BMI", "Outcome"])
# 정답지(y): 우리가 예측하려는 목표인 'BMI' 컬럼 데이터
y = df["BMI"]

# 피처 스케일링 (StandardScaler)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ⭐️ 2. stratify=y 옵션을 제거하고 데이터를 분리합니다.
# stratify 옵션은 분류 문제에서만 사용합니다.
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

# -----------------------------
# 2) 모델 구성 (회귀 모델)
# -----------------------------
# ⭐️ 3. 모든 모델을 회귀(Regressor)용으로 변경합니다.
dt_reg = DecisionTreeRegressor(random_state=42)
rf_reg = RandomForestRegressor(n_estimators=200, random_state=42)
lr_reg = LinearRegression()

# -----------------------------
# 3) 모델 학습
# -----------------------------
dt_reg.fit(X_train, y_train)
rf_reg.fit(X_train, y_train)
lr_reg.fit(X_train, y_train)

# -----------------------------
# 4) 모델 평가
# -----------------------------
# ⭐️ 4. 평가 방식도 회귀에 맞는 오차(MAE, RMSE, R²) 측정으로 변경합니다.
dt_pred = dt_reg.predict(X_test)
rf_pred = rf_reg.predict(X_test)
lr_pred = lr_reg.predict(X_test)

print("=== Test Metrics (BMI Prediction w/o Outcome) ===")
print(f"[Decision Tree]\nMAE: {mean_absolute_error(y_test, dt_pred):.3f} | RMSE: {np.sqrt(mean_squared_error(y_test, dt_pred)):.3f} | R^2: {r2_score(y_test, dt_pred):.3f}\n")
print(f"[Random Forest]\nMAE: {mean_absolute_error(y_test, rf_pred):.3f} | RMSE: {np.sqrt(mean_squared_error(y_test, rf_pred)):.3f} | R^2: {r2_score(y_test, rf_pred):.3f}\n")
print(f"[Linear Regression]\nMAE: {mean_absolute_error(y_test, lr_pred):.3f} | RMSE: {np.sqrt(mean_squared_error(y_test, lr_pred)):.3f} | R^2: {r2_score(y_test, lr_pred):.3f}")
